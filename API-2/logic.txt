Random Generation of N Questions:

The shuffling algorithm used to get the random n questions is Fisher Yates algorithm.

Fisher-Yates Shuffle
The getRandomSample utility uses the Fisher-Yates algorithm:

It operates by swapping elements from the end of the array with a random element chosen from the unshuffled portion.

Result: It guarantees that every permutation (ordering) of the array is equally likely. 
This is the mathematical gold standard for generating a true, unbiased random sample.

It achieves this randomization in $O(N)$ time, which is the fastest possible way to shuffle the list.

____________________________________________________________________________________________________________________

Checking the submitted answers in backend and generating score % :

1. The API Contract (POST /api/quiz-submit)
Endpoint Goal: Receive user input, calculate the authoritative score, and provide detailed results.

Input Data Structure: The endpoint requires the frontend to submit a JSON array containing the user's answers, structured as:

JSON

[
  { "id": 67, "selectedOptionIndex": 2 },
  { "id": 95, "selectedOptionIndex": 1 },
  // ...
]
The key property here, selectedOptionIndex, is generated by the frontend based on the user's clicks.

2. Validation and Calculation Steps
The server processes the submission in three steps:

A. Data Preparation and Lookup
The server first converts the master questions.json file into a Map data structure. 
This allows for near-instantaneous (O(1) time complexity) lookups of the correct answer index based on the question id.

B. Iterative Comparison (The Core Logic)
The server iterates through every item in the incoming userAnswers array.

For each submitted answer, it performs a secure comparison:

It fetches the user's choice: selectedIndex (from the submitted payload).

It fetches the correct answer: masterQuestion.correctOptionIndex (from the secure, internal master Map).

If selectedIndex === masterQuestion.correctOptionIndex, the question is marked correct.

C. Final Report Generation
The server tallies the correctCount and calculates the scorePercentage.

It constructs a detailedResults array that includes all the necessary feedback for the user (the question, 
the correct answer index, the user's choice, and the explanation), sending a comprehensive, final report back to the frontend.

____________________________________________________________________________________________________________________

